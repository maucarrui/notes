* 104. Maximum Depth of Binary Tree.

** Description

Given the ~root~ of a binary tree, return its /maximum depth/.

A binary tree's *maximum depth* is the number of nodes along the longest path
from the root node down to the farthest leaf node.

Each node on the tree is a ~TreeNode~ instance that has access to the value of
the node (~val~), the left child (~left~) and the right child (~right~).

*** Example 1

Given the following binary tree:

#+begin_src
  3
 / \
9  20
  /  \
 15   7
#+end_src

The maximum depth of the tree is ~3~.

** Solution

*** BFS traversal

**** Explanation

Perform a BFS traversal, and keep track of the current distance we're at to
return the maximum distance to the root.

To perform a BFS traversal we will use the ~deque~ collection that provides
Python to simulate a Queue. Initially, the only vertex the queue has is the
root. Take, and eliminate, the first element found on the queue and append to
the queue its left and right child if they're not ~None~. 

However, we're not taking track of the distance to the root. Notice that in the
only vertice present in the queue are the ones to the same distance to the root.
For example, at the beginning, the only vertex in the queue is the root as it
has distance ~0~ to the root. After one step of the BFS traversal, the only
vertices on the queue will be the ones to distance ~1~ to the root. And so on.
So we need to keep track of the vertices found on the queue before doing a BFS
step, and when we've traversed them all, we increase the distance by one. At the
end, this distance is the maximum depth of the binary tree.

#+begin_src python
  queue = deque([root])

  distance = 0
  while len(queue) > 0:
      vertices_in_queue = len(queue)

      for i in range(vertices_in_queue):
	  x = queue.popleft()

	  if x.left is not None:
	      queue.append(x.left)
	  if x.right is not None:
	      queue.append(x.right)

      distance += 1
#+end_src

We're missing a trivial case in this case. If ~root~ is ~None~ then simpy
return ~0~.

**** Complexity

We're only traversing one time all of the vertices found on the binary tree.
This takes ~O(n)~ time.

For the space complexity, in the worst case, our queue can hold up to ~n~
vertices, so it takes ~O(n)~ space.

**** Code

#+begin_src python
  # Empty tree case.
  if root is None:
      return 0

  # Perform a BFS traversal to the determine the maximum depth.
  queue = deque([root])
  distance = 0
  while len(queue) > 0:
      vertices_in_queue = len(queue)

      for i in range(vertices_in_queue):
	  x = queue.popleft()

	  if x.left is not None:
	      queue.append(x.left)
	  if x.right is not None:
	      queue.append(x.right)

      distance += 1

  return distance
#+end_src
